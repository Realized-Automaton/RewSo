
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates parody 'scratch and sniff' stickers based on a user-provided prompt.
 *
 * - generateSticker - A function that handles the sticker generation process.
 * - GenerateStickerInput - The input type for the generateSticker function.
 * - GenerateStickerOutput - The return type for the generateSticker function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateStickerInputSchema = z.object({
  prompt: z.string().describe('A text prompt describing the desired sticker content.'),
});
export type GenerateStickerInput = z.infer<typeof GenerateStickerInputSchema>;

const GenerateStickerOutputSchema = z.object({
  stickerDataUri: z
    .string()
    .describe(
      "The generated sticker image as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type GenerateStickerOutput = z.infer<typeof GenerateStickerOutputSchema>;

export async function generateSticker(input: GenerateStickerInput): Promise<GenerateStickerOutput> {
  return generateStickerFlow(input);
}

const generateStickerPrompt = ai.definePrompt({
  name: 'generateStickerPrompt',
  input: {schema: GenerateStickerInputSchema},
  output: {schema: GenerateStickerOutputSchema},
  prompt: `Generate a parody 'scratch and sniff' sticker image based on the following prompt:\n\n{{prompt}}\n\nThe image should be in the style of 80's humor, potentially involving bears doing gross things. Return the image as a data URI.`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const generateStickerFlow = ai.defineFlow(
  {
    name: 'generateStickerFlow',
    inputSchema: GenerateStickerInputSchema,
    outputSchema: GenerateStickerOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: input.prompt,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });
    return {stickerDataUri: media.url!};
  }
);

